package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"Rhize2/graph/model"
	"context"
	"encoding/json"

	"github.com/google/uuid"
	jsonata "github.com/xiatechs/jsonata-go"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	id := uuid.New().String()
	todo := &model.Todo{
		ID:   id,
		Text: input.Text,
		Done: false,
	}
	r.TodoList = append(r.TodoList, todo)
	return todo, nil
}

// ToggleTodoDone is the resolver for the toggleTodoDone field.
func (r *mutationResolver) ToggleTodoDone(ctx context.Context, id string) (*model.Todo, error) {
	for _, todo := range r.TodoList {
		if todo.ID == id {
			todo.Done = !todo.Done
			return todo, nil
		}
	}
	return nil, nil
}

// RemoveTodo is the resolver for the removeTodo field.
func (r *mutationResolver) RemoveTodo(ctx context.Context, id string) (*model.Todo, error) {
	for i, todo := range r.TodoList {
		if todo.ID == id {
			r.TodoList = append(r.TodoList[:i], r.TodoList[i+1:]...)
			return todo, nil
		}
	}
	return nil, nil
}

// JSONata is the resolver for the JSONata field.
func (r *mutationResolver) JSONata(ctx context.Context, expr string) (interface{}, error) {
	// Get todos data from the resolver
	todosData := r.TodoList
	println("Todos Data: ", todosData)

	// Convert todos data to JSON format
	todosJSON, err := json.Marshal(todosData)
	if err != nil {
		return nil, err
	}
	println("Todos JSON:", string(todosJSON))

	// Decode JSON.
	var data interface{}
	if err := json.Unmarshal(todosJSON, &data); err != nil {
		return nil, err
	}

	// Compile expression
	e := jsonata.MustCompile(expr)

	// Evaluate expression on decoded JSON data
	result, err := e.Eval(data)
	if err != nil {
		println("Error on Eval")
		return nil, err
	}
	println("JSONata Result:", result)

	return result, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.TodoList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
